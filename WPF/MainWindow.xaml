<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:System="clr-namespace:System;assembly=mscorlib" xmlns:SampleData="clr-namespace:Expression.Blend.SampleData.SampleDataSource" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" mc:Ignorable="d" x:Class="WPF.MainWindow"
        Title="MainWindow" Height="350" Width="525">
	<Window.Resources>
		<SampleData:SampleDataSource x:Key="SampleDataSource" d:IsDataSource="True"/>
		<Style x:Key="RowStyle" TargetType="{x:Type DataGridRow}">
			<Setter Property="Margin" Value="5"/>
			<Setter Property="Foreground" Value="#FF1F6DCB"/>
			<Setter Property="BorderBrush" Value="#FFCDCDCD"/>
			<Setter Property="BorderThickness" Value="1"/>
		</Style>
		<Style x:Key="RowHeaderStyle" TargetType="{x:Type DataGridRowHeader}">
			<Setter Property="Background" Value="White"/>
		</Style>
		<Style x:Key="HeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
			<Setter Property="Background" Value="#FFF0F0F0"/>
			<Setter Property="Foreground" Value="Gray"/>
		</Style>
		<Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
			<Setter Property="Background" Value="{x:Null}"/>
			<Setter Property="BorderBrush" Value="{x:Null}"/>
			<Setter Property="Foreground" Value="#FF636363"/>
			<Setter Property="BorderThickness" Value="0"/>
			<Style.BasedOn>
				<Style/>
			</Style.BasedOn>
		</Style>
		<Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
			<Setter Property="Background" Value="#FFF0F0F0"/>
			<Setter Property="BorderBrush">
				<Setter.Value>
					<SolidColorBrush Color="{DynamicResource {x:Static SystemColors.GrayTextColorKey}}"/>
				</Setter.Value>
			</Setter>
			<Setter Property="Content" Value=""/>
			<Setter Property="MaxWidth" Value="30"/>
			<Setter Property="MinWidth" Value="10"/>
			<Setter Property="Margin" Value="4"/>
			<Setter Property="MinHeight" Value="5"/>
			<Setter Property="MaxHeight" Value="15"/>
		</Style>
		<Style x:Key="ControlStyle" TargetType="{x:Type Control}">
			<Setter Property="Background" Value="White"/>
		</Style>
		<ControlTemplate x:Key="ComboBoxControlTemplate" TargetType="{x:Type ComboBox}">
			<Grid x:Name="templateRoot" SnapsToDevicePixels="True">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
				</Grid.ColumnDefinitions>
				<Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
					<Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
						<Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
							<ScrollViewer x:Name="DropDownScrollViewer">
								<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
									<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
										<Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
									</Canvas>
									<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
								</Grid>
							</ScrollViewer>
						</Border>
					</Themes:SystemDropShadowChrome>
				</Popup>
				<ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
					<ToggleButton.Style>
						<Style TargetType="{x:Type ToggleButton}">
							<Setter Property="OverridesDefaultStyle" Value="True"/>
							<Setter Property="IsTabStop" Value="False"/>
							<Setter Property="Focusable" Value="False"/>
							<Setter Property="ClickMode" Value="Press"/>
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="{x:Type ToggleButton}">
										<Border x:Name="templateRoot" BorderBrush="Black" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
											<Border.Background>
												<SolidColorBrush  Color="White"/>
											</Border.Background>
											<Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
												<Path x:Name="Arrow" Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z" Fill="#FF606060" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
											</Border>
										</Border>
										<ControlTemplate.Triggers>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
													<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
													<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
													<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
												</MultiDataTrigger.Conditions>
												<Setter Property="Background" TargetName="templateRoot" Value="White"/>
												<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFABADB3"/>
												<Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
												<Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
											</MultiDataTrigger>
											<Trigger Property="IsMouseOver" Value="True">
												<Setter Property="Fill" TargetName="Arrow" Value="Black"/>
											</Trigger>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
													<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
												</MultiDataTrigger.Conditions>
												<Setter Property="Background" TargetName="templateRoot">
													<Setter.Value>
														<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
															<GradientStop Color="#FFECF4FC" Offset="0"/>
															<GradientStop Color="#FFDCECFC" Offset="1"/>
														</LinearGradientBrush>
													</Setter.Value>
												</Setter>
												<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>
											</MultiDataTrigger>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
													<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
												</MultiDataTrigger.Conditions>
												<Setter Property="Background" TargetName="templateRoot" Value="White"/>
												<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>
												<Setter Property="Background" TargetName="splitBorder">
													<Setter.Value>
														<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
															<GradientStop Color="#FFEBF4FC" Offset="0"/>
															<GradientStop Color="#FFDCECFC" Offset="1"/>
														</LinearGradientBrush>
													</Setter.Value>
												</Setter>
												<Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF7EB4EA"/>
											</MultiDataTrigger>
											<Trigger Property="IsPressed" Value="True">
												<Setter Property="Fill" TargetName="Arrow" Value="Black"/>
											</Trigger>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
													<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
												</MultiDataTrigger.Conditions>
												<Setter Property="Background" TargetName="templateRoot">
													<Setter.Value>
														<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
															<GradientStop Color="#FFDAECFC" Offset="0"/>
															<GradientStop Color="#FFC4E0FC" Offset="1"/>
														</LinearGradientBrush>
													</Setter.Value>
												</Setter>
												<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
											</MultiDataTrigger>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
													<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
												</MultiDataTrigger.Conditions>
												<Setter Property="Background" TargetName="templateRoot" Value="White"/>
												<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
												<Setter Property="Background" TargetName="splitBorder">
													<Setter.Value>
														<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
															<GradientStop Color="#FFDAEBFC" Offset="0"/>
															<GradientStop Color="#FFC4E0FC" Offset="1"/>
														</LinearGradientBrush>
													</Setter.Value>
												</Setter>
												<Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF569DE5"/>
											</MultiDataTrigger>
											<Trigger Property="IsEnabled" Value="False">
												<Setter Property="Fill" TargetName="Arrow" Value="#FFBFBFBF"/>
											</Trigger>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
													<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
												</MultiDataTrigger.Conditions>
												<Setter Property="Background" TargetName="templateRoot" Value="#FFF0F0F0"/>
												<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFD9D9D9"/>
											</MultiDataTrigger>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
													<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
												</MultiDataTrigger.Conditions>
												<Setter Property="Background" TargetName="templateRoot" Value="White"/>
												<Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFBFBFBF"/>
												<Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
												<Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
											</MultiDataTrigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</ToggleButton.Style>
				</ToggleButton>
				<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
			</Grid>
			<ControlTemplate.Triggers>
				<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
					<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
					<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
				</Trigger>
				<Trigger Property="HasItems" Value="False">
					<Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
				</Trigger>
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsGrouping" Value="True"/>
						<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
					</MultiTrigger.Conditions>
					<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
				</MultiTrigger>
				<Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
					<Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
					<Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>
	</Window.Resources>
	<Grid Margin="0,0,41,0">
<!--	    <Grid.DataContext>-->
<!--	        <Binding Source="{StaticResource SampleDataSource}" />-->
<!--	    </Grid.DataContext>-->
	    <ComboBox x:Name="Name" HorizontalAlignment="Left" Margin="139.5,37,0,0" VerticalAlignment="Top" Width="80" SelectedIndex="0" Style="{DynamicResource ComboBoxStyle}" FocusVisualStyle="{DynamicResource ControlStyle}" Template="{DynamicResource ComboBoxControlTemplate}" BorderBrush="Black" BorderThickness="1" 
                  ItemsSource="{Binding Path=UniqueSet}" 
                  SelectedValue="{Binding Path=Filter, Mode=OneWayToSource, NotifyOnSourceUpdated=True}"
                  IsSynchronizedWithCurrentItem ="True"
                  />
	    <DataGrid x:Name="Grid" HorizontalAlignment="Left" Margin="30.667,83.667,0,0" VerticalAlignment="Top" Height="220" Width="424" AutoGenerateColumns="True" ItemsSource="{Binding Collection}" RowStyle="{DynamicResource RowStyle}" BorderThickness="0" GridLinesVisibility="None" RowHeaderStyle="{DynamicResource RowHeaderStyle}" ColumnHeaderStyle="{DynamicResource HeaderStyle}" >
<!--            <Button Content="{Binding Path=Filter}" Width="10" Style="{DynamicResource ButtonStyle}" Command="{Binding Path=ButtonClickCommandDekegate}"/>-->
            <DataGrid.Columns>
				  <DataGridTemplateColumn x:Name="userControlColumn">
                    <DataGridTemplateColumn.HeaderTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Label Content="Sort" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" Foreground="Gray"/>
                                <Button Content="{Binding Path=Filter}" Width="10" Style="{DynamicResource ButtonStyle}" 
                                        Command="{Binding Path=DataContext.ButtonClickCommandDelegate, RelativeSource={RelativeSource AncestorType=DataGrid}}" 
                                        />
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.HeaderTemplate>
                </DataGridTemplateColumn>
				<DataGridTextColumn Header="Date"/>
                <DataGridTextColumn  Header="ID"/>
				<DataGridTextColumn Header="Name"/>
			</DataGrid.Columns>
		</DataGrid>
		<Label Content="Name" HorizontalAlignment="Left" Margin="93,33,0,0" VerticalAlignment="Top" RenderTransformOrigin="0.773,0.548" Width="46" Height="31"/>
		<StackPanel HorizontalAlignment="Left" Height="100" Margin="67.333,-80,0,0" VerticalAlignment="Top" Width="100"/>

	</Grid>
</Window>
